# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/openai_image_inquiry.ipynb.

# %% auto 0
__all__ = ['encode_image', 'info', 'openai_inquiry']

# %% ../nbs/openai_image_inquiry.ipynb 2
import json
import base64
import requests
from openai import OpenAI

# %% ../nbs/openai_image_inquiry.ipynb 6
def encode_image(fname):
  with open(fname, "rb") as f:
    return base64.b64encode(f.read()).decode('utf-8')

# %% ../nbs/openai_image_inquiry.ipynb 8
def info(response):
    txt = json.loads(response.json())['choices'][0]['message']['content']
    data = json.loads(txt.replace('```json\n', "").replace('\n```', ""))
    return data

# %% ../nbs/openai_image_inquiry.ipynb 9
class openai_inquiry:
    def __init__(self):
        self.client = OpenAI()

    def ask_text(self, question):
        completion = self.client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": question}
            ]
        )
        return completion.choices[0].message.content

    def ask_image(self, fname):

        instruction = """
        Describe this image quantitatively as many as possible in json format.
        
        Here's the example:
        {'timestamp': '2024-10-06T19:04:14',
         'location': 'Kauppatori',
         'dimensions': {'width': 1280, 'height': 720},
         'buildings': {'number_of_buildings': 10,
          'building_height_range': '3-5 stories'},
         'vehicles': {'number_of_vehicles': 5, 'types': ['cars', 'trucks']},
         'waterbodies': {'visible': True, 'type': 'harbor', 'number_of_boats': 4},
         'street_lights': {'number_of_street_lights': 20},
         'people': {'approximate_number': 10},
         'lighting': {'time_of_day': 'evening', 'artificial_lighting': 'prominent'},
         'visibility': {'clear': True},
         'sky': {'visible': True, 'light_conditions': 'dusk'}}
        """
        
        response = self.client.chat.completions.create(
          model="gpt-4o",
          messages=[
            {
              "role": "user",
              "content": [
                {
                  "type": "text",
                  "text": instruction,
                },
                {
                  "type": "image_url",
                  "image_url": {
                    "url": f"data:image/jpeg;base64,{encode_image(fname)}",
                    "detail": "high",
                  },
                },
                # {
                #   "type": "image_url",
                #   "image_url": {
                #     "url": f"data:image/jpeg;base64,{encode_image(files[1])}"
                #   },
                # },
              ],
            }
          ],
          max_tokens=300,
        )
        return info(response)
